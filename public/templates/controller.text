<?php

namespace App\Http\Controllers;

use App\[MODEL_NAME];
use App\Services\[SERVICE_NAME];
use Illuminate\Http\Request;

class [CONTROLLER_NAME] extends Controller
{
    protected $[SERVICE_VARIABLE_NAME];

    public function __construct()
    {
        $this->[SERVICE_VARIABLE_NAME] = new [SERVICE_NAME]();
    }

    public function index(Request $request)
    {
        if (Gate::denies('list', [MODEL_NAME]::class)) {
            return view("errors.403");
        }

        $data = $request->all();
        $[MODEL_VARIABLE_NAME_PLURAL] = $this->[SERVICE_VARIABLE_NAME]->lists($data);

        $search = $request->search;

        return view("[VIEW_DIRECTORY].list", compact(["[MODEL_VARIABLE_NAME_PLURAL]", "search"]));
    }

    public function create(Request $request)
    {
        if (Gate::denies('create', [MODEL_NAME]::class)) {
            return view("errors.403");
        }

        return view("[VIEW_DIRECTORY].create");
    }

    public function edit(Request $request, $id)
    {
        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->getById($id);

        if (Gate::denies('edit', $[MODEL_VARIABLE_NAME_SINGULAR])) {
            return view("errors.403");
        }

        return view("[VIEW_DIRECTORY].edit", compact(["[MODEL_VARIABLE_NAME_SINGULAR]"]));
    }

    public function save([CREATE_FORM_REQUEST] $request)
    {
        if (Gate::denies('create', [MODEL_NAME]::class)) {
            return view("errors.403");
        }

        $validatedData = $request->all();

        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->updateOrCreate($validatedData);

        if(is_null($[MODEL_VARIABLE_NAME_SINGULAR]) === false){
            $message = message("[MODEL_NAME] has been successfully created.");
        }else{
            $message = message("[MODEL_NAME] has not created.", "error");
        }

        session()->flash("message", $message);
        return redirect()->back();
    }

    public function update([UPDATE_FORM_REQUEST] $request)
    {
        $validatedData = $request->all();

        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->updateOrCreate($validatedData);

        if(is_null($[MODEL_VARIABLE_NAME_SINGULAR]) === false){
            $message = message("[MODEL_NAME] has been successfully updated.");
        }else{
            $message = message("[MODEL_NAME] has not updated.", "error");
        }

        session()->flash("message", $message);
        return redirect()->back();
    }
    
    public function view(Request $request, $id)
    {
        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->getById($id);

        if (Gate::denies('view', $[MODEL_VARIABLE_NAME_SINGULAR])) {
            return view("errors.403");
        }

        return view("[VIEW_DIRECTORY].view", compact(["[MODEL_VARIABLE_NAME_SINGULAR]"]));
    }

    public function delete(Request $request)
    {
        $id = $request->id;

        $[MODEL_VARIABLE_NAME_SINGULAR] = $this->[SERVICE_VARIABLE_NAME]->getById($id);

        if (Gate::denies('delete', $[MODEL_VARIABLE_NAME_SINGULAR])) {
            return view("errors.403");
        }

        $response = $this->[SERVICE_VARIABLE_NAME]->delete($[MODEL_VARIABLE_NAME_SINGULAR]);
        
        if($response === true){
            $message = message("[MODEL_NAME] has been successfully deleted.");
        }else{
            $message = message("[MODEL_NAME] has not deleted.", "error");
        }

        session()->flash("message", $message);
        return redirect()->back();
    }
}
